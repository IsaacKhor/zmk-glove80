
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Number 1
#define LAYER_Symbol 2
#define LAYER_Function 3
#define LAYER_5 4
#define LAYER_Magic 5

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */
#define COMBO_TIMEOUT 30

#define LH_R1 0 1 2 3 4 5 
#define LH_R2 10 11 12 13 14 15 
#define LH_R3 22 23 24 25 26 27 
#define LH_R4 34 35 36 37 38 39 
#define LH_R5 46 47 48 49 50 51
#define LH_T1 52 53 54
#define LH_R6 64 65 66 67 68
#define LH_T2 69 70 71

#define RH_R1 6 7 8 9 10
#define RH_R2 16 17 18 19 20 21
#define RH_R3 28 29 30 31 32 33
#define RH_R4 40 41 42 43 44 45
#define RH_T1 55 56 57
#define RH_R5 58 59 60 61 62 63
#define RH_T2 72 73 74
#define RH_R6 75 76 77 78 79

#define LEFT_KEYS LH_R1 LH_R2 LH_R3 LH_R4 LH_R5 LH_R6 LH_T1 LH_T2
#define RIGHT_KEYS RH_R1 RH_R2 RH_R3 RH_R4 RH_R5 RH_R6 RH_T1 RH_T2

// Require this much time of idleness before resolving as hold
#define HRM_PRIOR_TIMEOUT_MS 100

// If double tap within this timeout, then hold the tap behaviour
#define HRM_QUICK_TAP_TIMEOUT 100

// The base time for resolving holds v taps
#define HRM_TAP_TERM 250

#define HRM_HOLDTAP_BEHAVIOR "balanced"

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "balanced";
};

/ {
    behaviors {

        hrml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = HRM_HOLDTAP_BEHAVIOR;
            tapping-term-ms = <HRM_TAP_TERM>;
            quick-tap-ms = <HRM_QUICK_TAP_TIMEOUT>;
            bindings = <&kp>, <&kp>;
            require-prior-idle-ms = <HRM_PRIOR_TIMEOUT_MS>;
            hold-trigger-key-positions = <RIGHT_KEYS>;
            hold-trigger-on-release;
        };

        hrmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = HRM_HOLDTAP_BEHAVIOR;
            tapping-term-ms = <HRM_TAP_TERM>;
            quick-tap-ms = <HRM_QUICK_TAP_TIMEOUT>;
            bindings = <&kp>, <&kp>;
            require-prior-idle-ms = <HRM_PRIOR_TIMEOUT_MS>;
            hold-trigger-key-positions = <LEFT_KEYS>;
            hold-trigger-on-release;
        };

    };
};


/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

};

/* Automatically generated macro definitions */
/ {
    macros {
    
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
                &none          &none         &none         &none           &none                                                                                                                  &none         &none         &none          &none            &none
                &none         &kp N1        &kp N2        &kp N3          &kp N4  &kp N5                                                                                         &kp N6          &kp N7        &kp N8        &kp N9         &kp N0            &none
              &kp TAB        &kp SQT     &kp COMMA       &kp DOT           &kp P   &kp Y                                                                                          &kp F           &kp G         &kp C         &kp R          &kp L        &kp SLASH
        &mt LCTRL ESC  &hrml LCTRL A  &hrml LALT O  &hrml LGUI E  &hrml LSHIFT U   &kp I                                                                                          &kp D  &hrmr RSHIFT H  &hrmr RGUI T  &hrmr RALT N  &hrmr RCTRL S  &mt RCTRL MINUS
            &kp LSHFT       &kp SEMI         &kp Q         &kp J           &kp K   &kp X   &kp LSHFT      &none                 &none             &none      &none    &kp RSHFT   &kp B           &kp M         &kp W         &kp V          &kp Z        &kp RSHFT
 &magic LAYER_Magic 0          &none         &none      &kp LEFT       &kp RIGHT          &lt 1 BSPC  &lt 3 ESC  &kp LC(LA(LS(LGUI)))  &kp LC(LS(LALT))  &lt 4 RET  &lt 2 SPACE                &kp DOWN        &kp UP         &none          &none            &none
            >;
        };

        layer_Number {
            bindings = <
  &none   &none      &none    &none     &none                                                                     &none     &none      &none   &none   &none
  &none   &none      &none    &none     &none   &none                                                   &none     &none     &none      &none   &none   &none
  &none   &none  &kp MINUS  &kp DOT  &kp FSLH   &none                                                   &none  &kp PLUS  &kp STAR  &kp EQUAL   &none   &none
  &none  &kp N6     &kp N2   &kp N0    &kp N4   &none                                                   &none    &kp N5    &kp N1     &kp N3  &kp N7   &none
  &none   &none      &none    &none    &kp N8   &none   &none   &none   &none   &none   &none   &none   &none    &kp N9     &none      &none  &tog 1   &none
  &none   &none      &none    &none     &none           &none   &none   &none   &none  &trans  &trans             &none     &none      &none   &none   &none
            >;
        };

        layer_Symbol {
            bindings = <
  &none      &none      &none      &none      &none                                                                      &none     &none      &none     &none   &none
  &none      &none      &none      &none      &none   &none                                                   &none      &none     &none      &none     &none   &none
  &none      &none  &kp GRAVE  &kp TILDE   &kp HASH   &none                                                   &none  &kp PRCNT  &kp LBKT   &kp RBKT     &none   &none
  &none  &kp UNDER   &kp LBRC   &kp RBRC   &kp DLLR   &none                                                   &none  &kp MINUS  &kp LPAR   &kp RPAR  &kp FSLH   &none
  &none   &kp EXCL   &kp AMPS   &kp BSLH  &kp COLON   &none   &none   &none   &none   &none   &none   &none   &none  &kp QMARK  &kp PIPE  &kp CARET    &kp AT   &none
  &none      &none      &none      &none      &none           &none   &none   &none   &none   &none   &none              &none     &none      &none     &none   &none
            >;
        };

        layer_Function {
            bindings = <
  &none   &none    &none    &none    &none                                                                                             &none               &none               &none               &none   &none
  &none   &none    &none    &none    &none    &none                                                                &none               &none               &none               &none               &none   &none
  &none  &kp F1   &kp F2   &kp F3   &kp F4  &kp F13                                                                &none    &kp LG(LC(LEFT))    &kp LG(LS(LBKT))    &kp LG(LS(RBKT))   &kp LG(RC(RIGHT))   &none
  &none  &kp F5   &kp F6   &kp F7   &kp F8  &kp F14                                                           &caps_word            &kp LEFT            &kp DOWN              &kp UP           &kp RIGHT   &none
  &none  &kp F9  &kp F10  &kp F11  &kp F12  &kp F15  &trans   &none   &none   &none   &none   &trans  &kp LG(LA(LC(F5)))  &kp LG(LA(LC(F1)))  &kp LG(LA(LC(F2)))  &kp LG(LA(LC(F3)))  &kp LG(LA(LC(F4)))   &none
  &none   &none    &none    &none    &none           &trans  &trans  &trans  &trans  &trans  &kp DEL                                   &none               &none               &none               &none   &none
            >;
        };

        layer_5 {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
